* Editable Node


  Literally had a dream about this last night, so I figure I should take some
notes.

Orb has some advantages when it comes to structural editing. The big one is
that there are no errors, except from the perspective of the user: every
string of bytes is a valid Orb document (we want that to be any string of
utf-8 characters, but don't validate it as such).

Also, if we re-parse just a block, we'll get a Doc containing only that block.
Everything is in blocks, and although we remove the block Node itself, we know
which of the subtypes are blocks and which aren't.

So if we had an editing mode, we could re-parse a subsection of the Doc with
every keystroke, if we minimized the amount of work we do.

At least for shorter Docs, we can probably get away with parsing just the
substring corresponding to the block, splicing a string with every keystroke,
and with grafting the new Node for the block to replace the old one; but I
doubt we'd get away with walking the entire Node to replace the old string
with the new string.

But! We can use the "twig" base class to fix this. The idea is to parse the
Doc completely on load, then go through and remove the =.str= field from every
sub-Node, and have the base class offer an =__index= function which retrieves
a =str= field from the root Node using =node:root().str= and return it, so we
get a JIT =.str= field.

That way, every edit does something like: extract the substring corresponding
to the block, splice in the insertion or deletion, re-parses that substring
using the appropriate offset, extracts the sub-Node (which should always be
Node[1]), grafts it as a replacement of the old block, splices the new string
into the old string, and puts it at =.str= of the root node.

Sounds like a lot of work when I write it out, but I don't think it actually
would be, as in I don't think it would interfere with drawing to the screen.

It would impose a speed penalty on anything which walks a Node and uses the
=.str= field, and that would be the very next thing we did, since we need to
determine the visible part of the document and render it with color markup.
But, there's no reason not to call that method with the string as an
parameter, and again, we only have to cover the visible lines.


** Digging In

Rather than =first, last, str=, a =node= has =_O, stride, version=.

As you might expect, the Node doesn't read =._O=, it reads =.o=, and this
checks =version= against a single closure which replies =false= on no change
and the latest version number on any change.

The stride only changes when a token under the Node has mutated.  This
invalidates all the offsets, but a token only has to know that when it needs
to know the offset, which isn't that often.

The root Node has omniscient knowledge of the version, consisting of the
change in width, and the offset it's applied to.  Since mutation propagates
to the root, all Nodes on that path have been re-strided, and none other
require that.  It is simple to derive the live offset on demand.

So when a Node sees a change of version, it asks the parent about the offset
adjustment, which the parent has if it has seen that version, and so on up the
chain.

As an optimistic algorithm, one might notify sibling nodes of the one being
re-offset, or perhaps the first parent.

I'm almost ready to start trying it out on 'synthetic nodes' which is, yeah,
a shim while I finish the bootstrap to get to the Qoph combinator.

